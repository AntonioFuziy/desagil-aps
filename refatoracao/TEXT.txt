APS-1 - 2020 - Desenvolvimento Colaborativo Ágil
________________________________________________

Alunos:
- Antonio Vieira Fuziy, antoniovf@al.insper.edu.br
- Victor Vergara Arcoverde de Albuquerque Cavalcanti, victorvaac@al.insper.edu.br
- André Barone Rocco, andrebr@al.insper.edu.br

Instruções:
- Melhorar a coesão de algum projeto da disciplina Design de Software.

O grupo escolheu o projeto final de Design de Software, para ser refatorado. Esse projeto baseava-se na criação de um jogo 
na linguagem Python utilizando classes e a biblioteca PyGame.

Para melhorar a coesão do arquivo seria ideial separarmos o código ChopperMAN.py em 5 arquivos:

    1) Player.py - Nesse arquivo fica a classe Player com seus atributos e métodos;
    
    2) HealthBar.py - Nesse arquivo fica a classe HealthBar com seus atributos e métodos;

    3) Galho.py - Nesse arquivo fica a classe Galho com seus atributos e métodos;

    4) Tronco.py - Nesse arquivo fica a classe Tronco com seus atributos e métodos;

    5) Game.py - Esse arquivo foi destinado para rodar o jogo importando as classes dos 4 arquivos.

O objetivo de separar esse código em vários arquivos, é de deixar o código mais limpo, mais fácil de encontrar os arquivos
das classes, mais fácil de editar e ser compreendido deixando-o mais intuitivo para o programador.

Separando as classes que antes estavam dentro do Game.py criou-se primeiramente o arquivo python Player.py, nesse arquivo 
estariam algumas propriedades do PyGame definindo os parâmetros para criação da classe player e seriam definidos a classe Player,
seus atributos e os métodos __init__ e update para renderizar as alterações do jogo, além de alguns imports, como Game, os e pygame. 

Além do arquivo Player.py criou-se também o arquivo HealthBar.py, o qual apresenta a classe HealthBar, junto de seus atributos, 
também apresenta os métodos __init__ e update com os mesmos objetivos do Player.py e por fim as bibliotecas e o arquivo Game.py
são importados no código. Esse arquivo é destinado a criação da barra de vida do player que se altera conforme o jogo roda.

Após isso, gerou-se o arquivo Tronco.py, representando o tronco em que o player interage para dar vida ao jogo, e nesse 
código cria-se a classe Tronco, declara-se seus atributos e métodos __init__ e update e importa-se também as mesmas bibliotecas
 e files do Player.py e HealthBar.py

Por fim criou-se a última file, chamada Galho.py, ela gera os galhos do tronco que o player precisa desviar durante o jogo 
para permanecer vivo, caso o player colida com o galho, ele morre e o jogo reinicia-se. No arquivo Galho.py estão localizados 
a criação da classe Galho, a declaração de seus atributos e métodos __init__ e update, além de importar as mesmas bibliotecas 
e files dos arquivos anteriores.

OBS: Importa-se o Game.py em todos os novos 4 arquivos por conta de alguns parâmetros pré-definidos no Game.py, como WIDTH, 
FPS, VIDA, entre outros.

Depois desses passos, foi necessário apenas alterar o arquivo Game.py para poder rodar o jogo novamente, para que isso fosse 
possível, era necessário importar os arquivos criados anteriormente, pois estes estavam com as classes de cada objeto do jogo, 
assim importou-se Player.py, HealthBar.py, Tronco.py e Galho.py para o código principal, lembrando que é recomendado importa-los 
por "from nome_arquivo import nome_classe", para que não seja necessário alterar as inicializações das classes no Game.py.

Finalmente, após essas alterações no código, o jogo deveria rodar perfeitamente como rodava antes, mas agora com uma estrutura 
muito mais coesa e intuitiva.